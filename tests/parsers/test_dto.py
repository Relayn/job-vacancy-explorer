"""Generative tests for VacancyDTO using Hypothesis."""

from datetime import datetime

from hypothesis import given
from hypothesis import strategies as st

from parsers.dto import VacancyDTO

# Базовые данные для создания DTO
BASE_DATA = {
    "title": "Test",
    "company": "Test Inc.",
    "location": "Test City",
    "description": "Test desc",
    "published_at": datetime.now(),
    "source": "hypothesis",
    "original_url": "http://test.com",
}


@given(
    st.one_of(
        st.none(),
        st.just("по договоренности"),
        # Генерируем строки, похожие на реальные данные о зарплате
        st.from_regex(
            r"\s*(от)?\s*\d{1,6}\s*(-|до)?\s*\d{0,6}\s*(руб|USD|EUR|RUR)?\s*",
            fullmatch=True,
        ),
    )
)
def test_salary_normalization_does_not_crash(salary_str: str | None) -> None:
    """Tests that salary normalization handles various inputs without crashing.

    Args:
        salary_str: A string generated by Hypothesis based on the strategy.
    """
    data = {"salary": salary_str, **BASE_DATA}
    try:
        dto = VacancyDTO(**data)
        # Проверяем, что поля имеют правильный тип после парсинга
        assert dto.salary_min_rub is None or isinstance(dto.salary_min_rub, int)
        assert dto.salary_max_rub is None or isinstance(dto.salary_max_rub, int)
    except Exception as e:
        # Если возникло исключение, тест провалится
        raise AssertionError(f"DTO creation failed for salary='{salary_str}'") from e

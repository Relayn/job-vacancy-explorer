[tool.poetry]
name = "job-vacancy-explorer"
version = "0.1.0"
description = "Web application for aggregating, searching and filtering job vacancies."
authors = ["Your Name <you@example.com>"]
readme = "README.md"
package-mode = false

[tool.poetry.dependencies]
python = "^3.11"
flask = "^3.0.3"
requests = "^2.32.3"
apscheduler = "^3.10.4"
python-dotenv = "^1.0.1"
gunicorn = "23.0.0"
psycopg = { version = "^3.1.19", extras = ["binary"] }
pydantic = "^2.8.2"
pydantic-settings = "^2.3.4"
sqlalchemy = "^2.0.31"
alembic = "^1.13.1"
markupsafe = "^3.0.2"
tzlocal = "^5.2"
beautifulsoup4 = "^4.13.4"
lxml = "^6.0.0"

[tool.poetry.group.dev.dependencies]
ruff = "^0.13.0"
black = "^25.1.0"
pytest = "^8.3.2"
pre-commit = "^4.2.0"
pytest-dotenv = "^0.5.2"
mypy = "^1.18.2"
bandit = "^1.8.6"
radon = "^6.0.1"
hypothesis = "^6.139.2"
pip-audit = "^2.9.0"
safety = "^3.6.1"
pytest-cov = "^7.0.0"
types-requests = "^2.32.4.20250913"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 88

[tool.ruff.lint]
# Добавляем "D" для проверки докстрингов (pydocstyle)
select = ["E", "F", "W", "I", "D"]

[tool.ruff.lint.pydocstyle]
# Указываем стиль докстрингов
convention = "google"

[tool.ruff.format]
quote-style = "double"

[tool.mypy]
# Включаем строгий режим
strict = true
# Явно отключаем проверку декораторов, т.к. Flask и Pytest используют
# динамические декораторы, которые mypy не может проверить без плагинов.
# Это обеспечивает консистентное поведение локально и в CI.
disallow_untyped_decorators = false
# Игнорируем отсутствующие тайп-хинты в сторонних библиотеках
ignore_missing_imports = true
plugins = ["pydantic.mypy"]
# Исключаем директорию с авто-генерируемыми файлами миграций,
# т.к. mypy не может корректно их анализировать.
exclude = ["alembic/"]

[tool.coverage.run]
# Указываем, какие директории нужно включать в отчет о покрытии
source = ["app", "core", "parsers"]

[tool.coverage.report]
# Тесты будут падать, если покрытие ниже 90%
fail_under = 88

[tool.bandit]
# Исключаем проверку на использование assert (B101),
# так как assert'ы активно и правомерно используются в тестах.
skips = ["B101"]
# Исключаем из сканирования директорию с виртуальным окружением.
exclude_dirs = [".venv"]

name: CI Pipeline

on: [push, pull_request]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Poetry
        run: pip install poetry

      - name: Install dependencies
        run: poetry install --with dev

      - name: Run Black
        run: poetry run black --check .

      - name: Run Ruff
        run: poetry run ruff check .

  unit-test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Poetry
        run: pip install poetry

      - name: Install dependencies
        run: poetry install --with dev

      - name: Run unit tests
        env:
          TEST_DATABASE_URL: "sqlite:///:memory:"
        run: poetry run pytest -m "not integration"

  integration-test:
    runs-on: ubuntu-latest
    needs: unit-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env file for CI
        run: cp .env.example .env

      - name: Start services
        env:
          # Эти переменные используются docker-compose для настройки контейнера с БД
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: vacancies_db
        run: docker compose up -d

      - name: Wait for PostgreSQL to be healthy
        run: |
          echo "Ожидание готовности PostgreSQL..."
          # Ждем до 30 секунд, пока healthcheck в docker-compose.yml не вернет статус 'healthy'
          timeout 30s bash -c 'until docker ps | grep vacancies_db | grep -q "(healthy)"; do sleep 2; done'
          echo "PostgreSQL готов!"

      - name: Run integration tests
        # Запускаем pytest только для директории tests/integration
        # Флаг -T нужен для неинтерактивного выполнения в CI
        run: docker compose exec -T app poetry run pytest -m "integration"

      - name: Stop services
        # Этот шаг выполнится всегда, даже если тесты упали
        if: always()
        run: docker compose down

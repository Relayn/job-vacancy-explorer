name: CI Pipeline

on: [push, pull_request]

jobs:
  lint-and-static-analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.11"

      - name: Install Poetry
        run: pip install poetry

      - name: Install dependencies
        run: poetry install --with dev

      - name: Run Ruff Formatter Check
        run: poetry run ruff format --check .

      - name: Run Ruff Linter
        run: poetry run ruff check .

      - name: Run Mypy
        run: poetry run mypy .

  unit-test:
    runs-on: ubuntu-latest
    needs: lint-and-static-analysis
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.11"

      - name: Install Poetry
        run: pip install poetry

      - name: Install dependencies
        run: poetry install --with dev

      - name: Run unit tests with coverage
        env:
          TEST_DATABASE_URL: "sqlite:///:memory:"
        # Генерируем отчет в формате XML для Codecov и используем fail_under из pyproject.toml
        run: poetry run pytest --cov --cov-report=xml -m "not integration"

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          fail_ci_if_error: true # Пайплайн упадет, если загрузка не удалась

  security-and-quality:
    runs-on: ubuntu-latest
    needs: lint-and-static-analysis
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.11"
      - name: Install Poetry
        run: pip install poetry
      - name: Install dependencies
        run: poetry install --with dev
      - name: Run Bandit (SAST)
        run: poetry run bandit -c pyproject.toml -r .
      - name: Run Radon (Code Complexity)
        run: poetry run radon mi . -i .venv
      - name: Run pip-audit (Dependency Vulnerabilities)
        run: poetry run pip-audit
      - name: Run safety (Dependency Vulnerabilities)
        run: poetry run safety check

  integration-test:
    runs-on: ubuntu-latest
    needs: [ unit-test, security-and-quality ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Create .env file for CI
        run: cp .env.example .env

      - name: Start services
        run: docker compose up -d

      - name: Wait for PostgreSQL to be healthy
        run: |
          timeout 30s bash -c 'until docker ps | grep vacancies_db | grep -q "(healthy)"; do sleep 2; done'

      - name: Install dev dependencies inside container
        run: docker compose exec -T -u root app poetry install --with dev

      - name: Run integration tests
        run: docker compose exec -T app pytest -m "integration"

      - name: Stop services
        if: always()
        run: docker compose down

"""Добавление полнотекстового поиска.

Revision ID: e5c1a4e7b8d9
Revises: ba93497f0d70
Create Date: 2025-07-04 10:30:15.123456

"""

from typing import Any, Sequence, Union, cast

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql as pg

from alembic import op as _alembic_op  # type: ignore[attr-defined]

op = cast(Any, _alembic_op)

# Идентификаторы ревизии, используемые Alembic.
revision: str = "e5c1a4e7b8d9"
down_revision: Union[str, Sequence[str], None] = "ba93497f0d70"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None

# --- Имя триггерной функции и триггера ---
TRIGGER_FUNCTION_NAME = "vacancies_tsvector_update"
TRIGGER_NAME = "tsvector_update_trigger"


def upgrade() -> None:
    """Применяет изменения схемы."""
    # ### commands auto generated by Alembic - please adjust! ###

    # 1. Добавляем новую колонку для tsvector
    op.add_column(
        "vacancies",
        sa.Column(
            "tsvector_search",
            cast(Any, pg.TSVECTOR)(),
            nullable=True,
            comment="TSVECTOR for full-text search on title and description",
        ),
    )

    # 2. Создаем GIN-индекс для этой колонки для быстрой работы FTS
    op.create_index(
        "ix_vacancies_tsvector_search",
        "vacancies",
        ["tsvector_search"],
        unique=False,
        postgresql_using="gin",
    )

    # 3. Создаем триггерную функцию, которая будет обновлять tsvector
    op.execute(
        sa.text(
            f"""
        CREATE OR REPLACE FUNCTION {TRIGGER_FUNCTION_NAME}() RETURNS trigger AS $$
        BEGIN
            NEW.tsvector_search :=
                setweight(to_tsvector('russian', coalesce(NEW.title, '')), 'A') ||
                setweight(to_tsvector('russian', coalesce(NEW.description, '')), 'B');
            RETURN NEW;
        END
        $$ LANGUAGE plpgsql;
        """
        )
    )

    # 4. Создаем триггер, который вызывает эту функцию при INSERT или UPDATE
    op.execute(
        sa.text(
            f"""
        CREATE TRIGGER {TRIGGER_NAME}
        BEFORE INSERT OR UPDATE ON vacancies
        FOR EACH ROW EXECUTE FUNCTION {TRIGGER_FUNCTION_NAME}();
        """
        )
    )

    # 5. Заполняем tsvector для уже существующих данных
    op.execute(
        sa.text(
            """
        UPDATE vacancies
        SET tsvector_search =
            setweight(to_tsvector('russian', coalesce(title, '')), 'A') ||
            setweight(to_tsvector('russian', coalesce(description, '')), 'B');
        """
        )
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Откатывает изменения схемы."""
    # ### commands auto generated by Alembic - please adjust! ###

    # Удаляем в обратном порядке
    op.execute(sa.text(f"DROP TRIGGER {TRIGGER_NAME} ON vacancies;"))
    op.execute(sa.text(f"DROP FUNCTION {TRIGGER_FUNCTION_NAME};"))
    op.drop_index("ix_vacancies_tsvector_search", table_name="vacancies")
    op.drop_column("vacancies", "tsvector_search")

    # ### end Alembic commands ###
